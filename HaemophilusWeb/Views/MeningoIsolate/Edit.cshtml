@using HaemophilusWeb.Models
@using HaemophilusWeb.Utils
@using HaemophilusWeb.Views.Utils
@model HaemophilusWeb.ViewModels.MeningoIsolateViewModel

@{
    ViewBag.Title = "Isolat bearbeiten";
    ViewBag.Controller = "MeningoPatientSending";
    ViewBag.SecondarySubmit = "Änderungen speichern und Befund erstellen";
}

@section EditModel
{

    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.MeningoIsolateId)
    @if (Model.LaboratoryNumber.StartsWith("-"))
    {
        @Html.ReadonlyFor(m => m.LaboratoryNumberWithPrefix)
    }
    else
    {
        @Html.TextEditorFor(m => m.LaboratoryNumber, prefix: DatabaseType.Meningococci.LaboratoryNumberPrefix())
    }
    @Html.ReadonlyFor(m => m.SamplingLocation)
    @Html.ReadonlyFor(m => m.Material)
    @Html.ReadonlyFor(m => m.Invasive)
    @Html.ReadonlyFor(m => m.PatientAgeAtSampling)

<div id="exTab2" class="container">
    <ul class="nav nav-tabs">
        <li class="active">
            <a  href="#generalTab" data-toggle="tab">Allgemein</a>
        </li>
        <li>
            <a  href="#molecularTypingTab" data-toggle="tab">Molekulare Typisierung</a>
        </li>
        <li>
            <a href="#pubMLSTTab" data-toggle="tab">PubMLST</a>
        </li>
    </ul>
    <div class="tab-content ">
        <div class="tab-pane active" id="generalTab">
            <p></p>

            @Html.EnumRadioEditorFor(model => model.GrowthOnBloodAgar, "col-sm-7")

            @Html.EnumRadioEditorFor(model => model.GrowthOnMartinLewisAgar, "col-sm-7")

            @Html.TextEditorFor(m => m.StemNumber, prefix: DatabaseType.Meningococci.StemNumberPrefix())

            @Html.EnumRadioEditorFor(model => model.Oxidase)

            @Html.EnumRadioEditorFor(model => model.Agglutination, "col-sm-10")

            @Html.EnumRadioEditorFor(model => model.GammaGt)

            @Html.EnumRadioEditorFor(model => model.Onpg)

            <div class="form-group">
                <label class="col-sm-2 control-label">E-Test Messwerte</label>
            </div>
            @Html.EditorFor(model => model.EpsilometerTestViewModels)

            @Html.EnumRadioEditorFor(model => model.SerogroupPcr, "col-sm-10")

            @Html.EnumRadioEditorFor(model => model.MaldiTof)
            <div id="MaldiTofMatchConfidenceForm" class="form-group">
                @Html.LabelFor(m => m.MaldiTofMatchConfidence, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.MaldiTofBestMatch, new { @class = "form-control", placeholder = "Beste Übereinstimmung" })
                    @Html.ValidationMessageFor(model => model.MaldiTofBestMatch)
                </div>
                <div class="col-sm-3">
                    <div class="input-group">
                        @Html.TextBoxFor(m => m.MaldiTofMatchConfidence, new { @class = "form-control", @placeholder = "Konfidenzwert" })
                        <span class="input-group-addon">00,0</span>
                    </div>
                    @Html.ValidationMessageFor(model => model.MaldiTofMatchConfidence)
                </div>
            </div>

            @Html.DateEditorFor(model => model.ReportDate)

            <div class="form-group">
                @Html.LabelFor(m => m.Remark, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-5">
                    @Html.TextAreaFor(m => m.Remark, new { @class = "form-control", @rows = "5" })
                </div>
            </div>
        </div>
        <div class="tab-pane" id="molecularTypingTab">
            <p></p>

            @Html.TextEditorFor(model => model.RplF)

            @Html.EnumRadioEditorFor(model => model.RealTimePcr, "col-sm-6")
            @Html.EnumRadioEditorFor(m => m.RealTimePcrResult, "col-sm-7", "RealTimePcrForm")

            @Html.EnumRadioEditorFor(model => model.RibosomalRna16S, "col-sm-6")
            <div id="RibosomalRna16SMatchInPercentForm" class="form-group">
                @Html.LabelFor(m => m.RibosomalRna16SMatchInPercent, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.RibosomalRna16SBestMatch, new { @class = "form-control", placeholder = "Beste Übereinstimmung" })
                    @Html.ValidationMessageFor(model => model.RibosomalRna16SBestMatch)
                </div>
                <div class="col-sm-3">
                    <div class="input-group">
                        @Html.TextBoxFor(m => m.RibosomalRna16SMatchInPercent, new { @class = "form-control", placeholder = "in Prozent" })
                        <span class="input-group-addon">%</span>
                    </div>
                    @Html.ValidationMessageFor(model => model.RibosomalRna16SMatchInPercent)
                </div>
            </div>

            <div class="form-group">
                <label class="col-sm-12">Bestimmung der Serogenogruppe</label>
            </div>
            @Html.EnumRadioEditorFor(m => m.CsbPcr, "col-sm-6")
            @Html.EnumRadioEditorFor(m => m.CscPcr, "col-sm-6")
            @Html.EnumRadioEditorFor(m => m.CswyPcr, "col-sm-6")
            @Html.EnumRadioEditorFor(m => m.CswyAllele, "col-sm-7", "CswyAlleleForm")

            <div class="form-group">
                <label class="col-sm-12">Bestimmung der variablen Regionen</label>
            </div>
            @Html.EnumRadioEditorFor(model => model.PorAPcr, "col-sm-6")
            <div id="PorAPcrForm" class="form-group">
                @Html.LabelFor(m => m.PorAVr1, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-2">
                    @Html.TextBoxFor(m => m.PorAVr1, new { @class = "form-control", placeholder = "5-2" })
                    @Html.ValidationMessageFor(model => model.PorAVr1)
                </div>
                @Html.LabelFor(m => m.PorAVr2, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-2">
                    @Html.TextBoxFor(m => m.PorAVr2, new { @class = "form-control", placeholder = "10" })
                    @Html.ValidationMessageFor(model => model.RibosomalRna16SMatchInPercent)
                </div>
            </div>


            @Html.EnumRadioEditorFor(model => model.FetAPcr, "col-sm-6")
            @Html.TextEditorFor(m => m.FetAVr, "1-5", "F", "FetAPcrForm", "col-sm-2")
        </div>
        <div class="tab-pane" id="pubMLSTTab">
            <p></p>
            <div class="form-group">
                <label class="col-sm-2 control-label" for="PubMlstIsolateId">Isolat Nummer</label>
                <div class="col-sm-5">
                    <input class="form-control" id="PubMlstIsolateId" placeholder="35105" type="text">
                </div>
                <div class="col-sm-2">
                    <button class="btn btn-info" type="button" id="PubMlstQuery" data-loading-text="Abfrage läuft <i class='glyphicon glyphicon-time'></i>">Abfragen</button>
                </div>
                <div class="col-sm-2">
                    <span class="label label-warning" id="PubMlstIsolateNotFound" style="display: none;">Isolat wurde nicht gefunden</span>
                    <span class="label label-success" id="PubMlstIsolateFound" style="display: none;">Isolat wurde geladen</span>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label">ST</label>
                <div class="col-sm-2">
                    <input class="form-control" id="PM-SequenceType" type="text" readonly>
                </div>
                <label class="col-sm-2 control-label">cc</label>
                <div class="col-sm-2">
                    <input class="form-control" id="PM-ClonalComplex" type="text" readonly>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label">PorA-VR1</label>
                <div class="col-sm-2">
                    <input class="form-control" id="PM-PorAVr1" type="text" readonly>
                </div>
                <label class="col-sm-2 control-label">PorA-VR2</label>
                <div class="col-sm-2">
                    <input class="form-control" id="PM-PorAVr2" type="text" readonly>
                </div>
                <label class="col-sm-2 control-label">FetA-VR</label>
                <div class="col-sm-2">
                    <input class="form-control" id="PM-FetAVr" type="text" readonly>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label">'porB</label>
                <div class="col-sm-2">
                    <input class="form-control" id="PM-PorB" type="text" readonly>
                </div>
                <label class="col-sm-2 control-label">fHbp</label>
                <div class="col-sm-2">
                    <input class="form-control" id="PM-Fhbp" type="text" readonly>
                </div>
                <label class="col-sm-2 control-label">NHBA</label>
                <div class="col-sm-2">
                    <input class="form-control" id="PM-Nhba" type="text" readonly>
                </div>
            </div>

            <div class="form-group">
                <label class="col-sm-2 control-label">nadA</label>
                <div class="col-sm-2">
                    <input class="form-control" id="PM-NadA" type="text" readonly>
                </div>
                <label class="col-sm-2 control-label">penA</label>
                <div class="col-sm-2">
                    <input class="form-control" id="PM-PenA" type="text" readonly>
                </div>
                <label class="col-sm-2 control-label">NHBA</label>
                <div class="col-sm-2">
                    <input class="form-control" id="PM-GyrA" type="text" readonly>
                </div>
            </div>

            <div class="form-group">
                <label class="col-sm-2 control-label">parC</label>
                <div class="col-sm-2">
                    <input class="form-control" id="PM-ParC" type="text" readonly>
                </div>
                <label class="col-sm-2 control-label">parE</label>
                <div class="col-sm-2">
                    <input class="form-control" id="PM-ParE" type="text" readonly>
                </div>
                <label class="col-sm-2 control-label">rpoB</label>
                <div class="col-sm-2">
                    <input class="form-control" id="PM-RpoB" type="text" readonly>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label">rplF</label>
                <div class="col-sm-2">
                    <input class="form-control" id="PM-RplF" type="text" readonly>
                </div>
            </div>

        </div>
</div></div>


}

@section Scripts{
    <script>
    preventSiteNavigationWithPendingChanges();

    var clinicalBreakpoints = @(Html.Raw(Json.Encode(ViewBag.ClinicalBreakpoints)));

    $(document).ready(
        function () {
            $("select[id$=_EucastClinicalBreakpointId]").change(ETestChange);
            $("select[id$=_Measurement]").change(ETestChange);
            $("select[id$=_Antibiotic]").change(ETestChange);

            ConfigureConditionalFields();

            $("#PubMlstQuery").click(QueryPubMlstDatabase);
            $("#PubMlstIsolateId").keypress(QueryPubMlstDatabaseKeypress);

            $(".tab-content").find("div.tab-pane:hidden:has(span.field-validation-error)").each(function (index, tab) {
                var id = $(tab).attr("id");
                $('a[href="#' + id + '"]').tab('show');
            });
        }
    );

    function ConfigureConditionalFields() {
        ShowOnSpecificRadioValue("RibosomalRna16SMatchInPercentForm", "RibosomalRna16S", "Positive", GeneralInput("RibosomalRna16SBestMatch"), GeneralInput("RibosomalRna16SMatchInPercent"));
        ShowOnSpecificRadioValue("MaldiTofMatchConfidenceForm", "MaldiTof", "Determined", GeneralInput("MaldiTofBestMatch"), GeneralInput("MaldiTofMatchConfidence"));
        ShowOnSpecificRadioValue("PorAPcrForm", "PorAPcr", "Positive", GeneralInput("PorAVr1"), GeneralInput("PorAVr2"));
        ShowOnSpecificRadioValue("FetAPcrForm", "FetAPcr", "Positive", GeneralInput("FetAVr"));
        ShowOnSpecificRadioValue("CswyAlleleForm", "CswyPcr", "Positive", RadioInput("CswyAllele"));
        ShowOnSpecificRadioValue("RealTimePcrForm", "RealTimePcr", "Positive", RadioInput("RealTimePcrResult"));
    }

    function QueryPubMlstDatabaseKeypress(e) {
        if (e.keyCode == '13') {
            e.preventDefault();
            QueryPubMlstDatabase();
        }
    }

    function QueryPubMlstDatabase() {
        var fields = [
            "PorAVr1", "PorAVr2", "FetAVr", "PorB", "Fhbp", "Nhba", "NadA", "PenA", "GyrA", "ParC", "ParE", "RpoB",
            "RplF", "SequenceType", "ClonalComplex"
        ];
        var id = $("#PubMlstIsolateId").val();

        $("#PubMlstIsolateNotFound").hide();
        $("#PubMlstIsolateFound").hide();

        if (!id) {
            $("#PubMlstIsolateNotFound").show();
            return;
        }

        $("#PubMlstQuery").button("loading");

        $.ajax("@Url.Content("~/PubMlst/NeisseriaIsolates/")", {method:"POST",data:{ isolateId: $("#PubMlstIsolateId").val() }} )
        .done(function (data) {
            fields.forEach(v => $('#PM-' + v).val(data[v]));
            $("#PubMlstIsolateFound").show();
        })
        .fail(function () {
            fields.forEach(v => $('#PM-' + v).val(""));
            $("#PubMlstIsolateNotFound").show();
        })
        .always(function() {
            $("#PubMlstQuery").button("reset");
        });
     }

    function FindEntry(alleleIds, key) {
        var result = alleleIds.find(a => a[key] !== undefined);
        if (result) {
            return result[key];
        }
        return "";
    }

    //TODO Refactor this duplicate to etest.js (see also Isolate-Edit.cshtml)
    function ETestChange() {
        var id = $(this).attr('id');
        var indexOfSeparator = id.indexOf('__');
        var prefix = id.substring(0, indexOfSeparator);
        var suffix = id.substring(indexOfSeparator + 2);
        var currentBreakpointSelector = '#' + prefix + '__EucastClinicalBreakpointId';
        var currentMeasurementSelector = '#' + prefix + '__Measurement';

        SetETestResult(prefix, null);

        if (suffix === "Antibiotic") {
            var antibiotic = $(this).val();

            $(currentBreakpointSelector)
                .find('option')
                .remove();
            $(currentBreakpointSelector).append('<option value>Auswählen...</option>');

            if (antibiotic === "") {
                $(currentMeasurementSelector).val("");
                return;
            }

            clinicalBreakpoints.forEach(function(clinicalBreakpoint) {
                if (antibiotic == clinicalBreakpoint.Antibiotic) {
                    $(currentBreakpointSelector)
                        .append(
                            '<option value="' + clinicalBreakpoint.EucastClinicalBreakpointId + '">' + clinicalBreakpoint.Title + '</option>'
                        );
                }
            });
        }


        var currentMeasurement = Globalize.parseFloat($(currentMeasurementSelector).val());
        if (isNaN(currentMeasurement)) {
            return;
        }

        if (currentMeasurement > 0 && $(currentBreakpointSelector).prop("selectedIndex") == 0) {
            $(currentBreakpointSelector).prop("selectedIndex", 1);
        } else if (currentMeasurement == 0) {
            $(currentBreakpointSelector).prop("selectedIndex", 0);
        }

        var currentBreakpointId = parseInt($(currentBreakpointSelector).val());

        clinicalBreakpoints.forEach(function(clinicalBreakpoint) {
                if (currentBreakpointId === clinicalBreakpoint.EucastClinicalBreakpointId) {
                    if (clinicalBreakpoint.NoEucastAvailable) {
                        SetETestResult(prefix, '@(EpsilometerTestResult.NotDetermined.ToString())');
                    } else if (currentMeasurement > clinicalBreakpoint.MicBreakpointResistent) {
                        SetETestResult(prefix, '@(EpsilometerTestResult.Resistant.ToString())');
                    } else if (currentMeasurement <= clinicalBreakpoint.MicBreakpointSusceptible) {
                        SetETestResult(prefix, '@(EpsilometerTestResult.Susceptible.ToString())');
                    } else if (currentMeasurement != null) {
                        SetETestResult(prefix, '@(EpsilometerTestResult.Intermediate.ToString())');
                    }
                }
            });
        }

        function SetETestResult(prefix, result) {
            var resultSelector = '#' + prefix + '__Result';

            $(resultSelector).val('');
            $(resultSelector).parent().find(".label").hide();

            if (result != null) {
                $(resultSelector).parent().find(".label-etest-" + result).show();
                $(resultSelector).val(result);
            }
        }

    </script>
}