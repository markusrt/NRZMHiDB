@using HaemophilusWeb.Utils
@using HaemophilusWeb.Views.Utils
@model HaemophilusWeb.ViewModels.IsolateViewModel

@{
    ViewBag.Title = "Befund erstellen";
}

@Scripts.Render("~/bundles/docxgen")

<div class="modal fade" id="discrepantResultsModal">
    <div class="modal-dialog">
        <div class="modal-content panel-warning">
            <div class="modal-header  panel-heading">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">Diskrepante Ergebnisse</h4>
            </div>
            <div class="modal-body">
                <p>Diskrepante Ergebnisse, bitte Datenbankeinträge kontrollieren. Soll dennoch ein Befundvorschlag ausgegeben werden?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Nein</button>
                <button id="ForceCreateReport" type="button" class="btn btn-default">Ja</button>
            </div>
        </div>
    </div>
</div>
<div class="col-md-6">
    <h3>Befund (Auszug)</h3>
    <dl class="dl-horizontal">
        <dt>@Html.DisplayNameFor(model => model.LaboratoryNumber)</dt>
        <dd>@Html.DisplayFor(model => model.LaboratoryNumber)</dd>
        <dt>@Html.DisplayNameFor(model => model.SamplingLocation)</dt>
        <dd>@Html.DisplayFor(model => model.SamplingLocation)</dd>
        <dt>@Html.DisplayNameFor(model => model.Patient)</dt>
        <dd>@Html.DisplayFor(model => model.Patient)</dd>
    </dl>
    <dl class="dl-horizontal">
        <dt>@Html.DisplayNameFor(model => model.Evaluation)</dt>
        <dd>@EnumEditor.GetEnumDescription(Model.Evaluation)</dd>
        <dt>@Html.DisplayNameFor(model => model.Agglutination)</dt>
        <dd>@EnumEditor.GetEnumDescription(Model.Agglutination)</dd>
        <dt>@Html.DisplayNameFor(model => model.SerotypePcr)</dt>
        <dd>@EnumEditor.GetEnumDescription(Model.SerotypePcr)</dd>
        <dt>@Html.DisplayNameFor(model => model.BexA)</dt>
        <dd>@EnumEditor.GetEnumDescription(Model.BexA)</dd>
        <dt>@Html.DisplayNameFor(model => model.BetaLactamase)</dt>
        <dd>@EnumEditor.GetEnumDescription(Model.BetaLactamase)</dd>
    </dl>

    @if (Model.ETests.Any())
    {
        <dl class="dl-horizontal">
            @foreach (var etest in Model.ETests)
            {
                <dt>@etest.Antibiotic</dt>
                <dd>@etest.Result</dd>
            }
        </dl>
    }

    <dl class="dl-horizontal">
        <dt>@Html.DisplayNameFor(model => model.Interpretation)</dt>
        <dd>@Html.DisplayFor(model => model.Interpretation)</dd>
    </dl>
</div>
<div class="col-md-6">
    <h3>Zuständiges Gesundheitsamt</h3>
    <dl class="dl-horizontal">
        <dt>Adresse</dt>
        <dd id="healthOfficeAddress"></dd>
        <dt>Telefon</dt>
        <dd id="healthOfficePhone"></dd>
        <dt>Fax</dt>
        <dd id="healthOfficeFax"></dd>
        <dt>E-Mail</dt>
        <dd id="healthOfficeEmail"></dd>
    </dl>
</div>
<div class="clearfix"></div>
<div class="col-md-12">
    <hr />
    <div class="form-horizontal">
        <div class="form-group">
            @Html.Label("Befundsvorlage", new { @class = "col-sm-2 control-label" })
            <div class="col-sm-5">
                @Html.DropDownList("ReportTemplate", ((IEnumerable<FileInfo>)ViewBag.ReportTemplates).Select(option => new SelectListItem
            {
                Text = (option == null ? "Keine Vorlagen hinterlegt" : option.Name),
                Value = Url.Content(option.FullName.ReverseMapPath())
            }), "Auswählen...", new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Unterzeichner", new { @class = "col-sm-2 control-label" })
            <div class="col-sm-5">
                @Html.DropDownList("ReportSigner", ((IEnumerable<string>)ViewBag.ReportSigners).Select(option => new SelectListItem
            {
                Text = option,
                Value = option
            }), "Auswählen...", new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button id="TryCreateReport" class="btn btn-primary">Befund erstellen</button>
                @Html.ActionLink("Isolat bearbeiten", "Edit", "Isolate", new { id = Model.IsolateId }, new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
</div>


@section Scripts{

    <script>
        var queryHealthOfficeAddress = "https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20htmlpost%20where%0Aurl%3D'https%3A%2F%2Ftools.rki.de%2FPLZTool%2Fde-DE%2FHome%2FSearch'%20%0Aand%20postdata%3D%22RequestString%3D91301%22%20and%20xpath%3D%22%2F%2F*%5B%40id%3D'tbxAdress'%5D%2Ftext()%22&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys";

        var documentData = @(Html.Raw(Json.Encode(Model)));

        $("#TryCreateReport").click(function()
        {
            if (documentData["Interpretation"].indexOf("Diskrepant") > -1)
            {
                $("#discrepantResultsModal").modal("show");
            }
            else
            {
                DoCreateReport();
            }
        });

        $("#ForceCreateReport").click(function()
        {
            $("#discrepantResultsModal").modal("hide");
            DoCreateReport();
        });

        function DoCreateReport()
        {
            var templateFile = $("#ReportTemplate").val();
            var signer = $("#ReportSigner").val();
            if(templateFile === "" || signer === "")
            {
                ShowError("Bitte wählen Sie eine Befundvorlage und einen Unterzeichner aus.");
                return;
            }

            documentData["Signer"] = signer;

            $(documentData.Typings).each(function(index, typing) {
                documentData["Typing-"+typing.Attribute] = typing.Value;
            });

            new DocxGen().loadFromFile(templateFile, { async: true, intelligentTagging: true }).success(function(doc)
            {
                doc.setTags(documentData);
                doc.applyTags();
                doc.output({ name: "@("KL " + Model.LaboratoryNumber.Replace("/","_") + "-" + DateTime.Now.ToString("yyyy-MM-dd") + ".docx")", type:"blob" });
                var url = "@Url.Content("~/Isolate/ReportGenerated/")";
                $.post( url, { id: @Model.IsolateId } );
            });
        }

        $(document).ready(function() {
            queryHealthOfficeViaRkiTool('@Model.PatientPostalCode');
        });

    </script>
}
