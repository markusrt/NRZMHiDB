@using HaemophilusWeb.Models
@using HaemophilusWeb.Utils
@using HaemophilusWeb.Validators
@using HaemophilusWeb.Views.Utils
@model HaemophilusWeb.ViewModels.EpsilometerTestViewModel

@{ 
    var relevantBreakPoints = ((IEnumerable<EucastClinicalBreakpoint>) ViewBag.ClinicalBreakpoints).Where(
        b => b.Antibiotic == Model.Antibiotic).ToList();
    var measurements = EpsilometerTestValidator.GetETestScale(Model.Antibiotic);
}

<div class="form-group">
        @if (Model.ReadonlyAntibiotic)
        {
            <label title="@EnumEditor.GetEnumDescription(Model.Antibiotic)" class="col-sm-2 control-label nowrap-ellipsis">@EnumEditor.GetEnumDescription(Model.Antibiotic)</label>
            @Html.HiddenFor(model => model.Antibiotic);
            @Html.HiddenFor(model => model.ReadonlyAntibiotic);
        }
        else
        {
            <div class="col-sm-2 col-xs-12">
                @Html.DropDownListFor(model => model.Antibiotic, ((IEnumerable<Antibiotic>)ViewBag.Antibiotics).Select(
                option => new SelectListItem
                {
                    Text = EnumUtils.GetEnumDescription<Antibiotic>(option),
                    Value = ((int)option).ToString(),
                    Selected = (Model != null) && (option == Model.Antibiotic),
                }), "Antibiotikum auswählen...", new { @class = "form-control", @onchange = "CallChangefunc(this.value)" })
            </div>
        }

    <div class="col-sm-2 col-xs-3">
        @Html.DropDownListFor(m => m.Measurement, measurements.Select(
            option => new SelectListItem
            {
                Text = option.ToString(),
                Value = option.ToString(),
                Selected = Model != null && option.Equals(Model.Measurement)
            }), "E-Test Wert auswählen...", new {@class = "form-control"})
        @Html.ValidationMessageFor(m => m.Measurement)
    </div>
    <div class="col-sm-4 col-xs-7">
        @Html.DropDownListFor(model => model.EucastClinicalBreakpointId, relevantBreakPoints.Select(
            option => new SelectListItem
            {
                Text = option.Title,
                Value = option.EucastClinicalBreakpointId.ToString(),
                Selected = (Model != null) && (option.EucastClinicalBreakpointId == Model.EucastClinicalBreakpointId)
            }), "EUCAST Breakpoint auswählen...", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.EucastClinicalBreakpointId)
    </div>
    <div class="col-sm-4 col-xs-2 etest-labels">
        @foreach (var eTestResult in EnumUtils.AllEnumValues<EpsilometerTestResult>())
        {
            <span class="label label-etest-@(eTestResult.ToString())" style="@(Model.Result == eTestResult ? "" : "display:none")">
                @EnumEditor.GetEnumDescription(eTestResult)
            </span>
        }
        @Html.HiddenFor(m => m.Result)
    </div>
</div>

<script>
    function CallChangefunc(val) {
        var measurements = @Html.Raw(Json.Encode(EpsilometerTestValidator.OtherAntibioticsETestScale));
        $('#EpsilometerTestViewModels_0__Measurement').children().remove();
        if (val == @Html.Raw((int)Antibiotic.Ampicillin) || val == @Html.Raw((int)Antibiotic.AmoxicillinClavulanate) ) {
            measurements = @Html.Raw(Json.Encode(EpsilometerTestValidator.AmpicillinAndAmoxicillinClavulanateETestScale));
        }

        $('<option/>').html("E-Test Wert auswählen...").appendTo('#EpsilometerTestViewModels_0__Measurement');
        for (var i = 0; i < measurements.length;i++){
            $('<option/>').val(measurements[i].toLocaleString()).html(measurements[i].toLocaleString()).appendTo('#EpsilometerTestViewModels_0__Measurement');
        }
    }
</script>

