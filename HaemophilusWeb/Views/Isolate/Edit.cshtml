@using HaemophilusWeb.Views.Utils
@model HaemophilusWeb.ViewModels.IsolateViewModel

@{
    ViewBag.Title = "Isolat bearbeiten";
    ViewBag.Controller = "PatientSending";
}

@section EditModel
{
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.IsolateId)

    @Html.TextEditorFor(m => m.LaboratoryNumber)

    <div class="form-group">
        @Html.LabelFor(model => model.Material, new {@class = "control-label col-sm-2"})
        <div class="col-sm-5 form-control-static">
            @Html.DisplayFor(model => model.Material)
            @Html.HiddenFor(model => model.Material)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Invasive, new {@class = "control-label col-sm-2"})
        <div class="col-sm-5 form-control-static">
            @Html.DisplayFor(model => model.Invasive)
            @Html.HiddenFor(model => model.Invasive)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PatientAgeAtSampling, new {@class = "control-label col-sm-2"})
        <div class="col-sm-5 form-control-static">
            @Html.DisplayFor(model => model.PatientAgeAtSampling)
            @Html.HiddenFor(model => model.PatientAgeAtSampling)
        </div>
    </div>

    @Html.TextEditorFor(m => m.StemNumber)

    <div class="form-group">
        @Html.LabelFor(model => model.Oxidase, new { @class = "col-sm-2 control-label" })
        <div class="col-sm-5">
            @Html.EnumRadioButtonFor(model => model.Oxidase)
            @Html.ValidationMessageFor(model => model.Oxidase)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.BetaLactamase, new { @class = "col-sm-2 control-label" })
        <div class="col-sm-5">
            @Html.EnumRadioButtonFor(model => model.BetaLactamase)
            @Html.ValidationMessageFor(model => model.BetaLactamase)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Agglutination, new { @class = "col-sm-2 control-label" })
        <div class="col-sm-10">
            @Html.EnumRadioButtonFor(model => model.Agglutination)
            @Html.ValidationMessageFor(model => model.Agglutination)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FactorTest, new {@class = "col-sm-2 control-label"})
        <div class="col-sm-10">
            @Html.EnumRadioButtonFor(model => model.FactorTest)
            @Html.ValidationMessageFor(model => model.FactorTest)
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.Ampicillin, new {@class = "col-sm-2 col-xs-12 control-label"})
        @Html.EditorFor(model => model.Ampicillin, new {@class = "form-control"})
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.AmoxicillinClavulanate, new {@class = "col-sm-2 col-xs-12 control-label"})
        @Html.EditorFor(model => model.AmoxicillinClavulanate, new {@class = "form-control"})
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Meropenem, new {@class = "col-sm-2 col-xs-12 control-label"})
        @Html.EditorFor(model => model.Meropenem, new {@class = "form-control"})
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Cefotaxime, new {@class = "col-sm-2 col-xs-12 control-label"})
        @Html.EditorFor(model => model.Cefotaxime, new {@class = "form-control"})
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.OuterMembraneProteinP2, new {@class = "col-sm-2 control-label"})
        <div class="col-sm-5">
            @Html.EnumRadioButtonFor(model => model.OuterMembraneProteinP2)
            @Html.ValidationMessageFor(model => model.OuterMembraneProteinP2)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.BexA, new {@class = "col-sm-2 control-label"})
        <div class="col-sm-5">
            @Html.EnumRadioButtonFor(model => model.BexA)
            @Html.ValidationMessageFor(model => model.BexA)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SerotypePcr, new {@class = "col-sm-2 control-label"})
        <div class="col-sm-5">
            @Html.EnumRadioButtonFor(model => model.SerotypePcr)
            @Html.ValidationMessageFor(model => model.SerotypePcr)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FuculoKinase, new {@class = "col-sm-2 control-label"})
        <div class="col-sm-5">
            @Html.EnumRadioButtonFor(model => model.FuculoKinase)
            @Html.ValidationMessageFor(model => model.FuculoKinase)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.OuterMembraneProteinP6, new {@class = "col-sm-2 control-label"})
        <div class="col-sm-10">
            @Html.EnumRadioButtonFor(model => model.OuterMembraneProteinP6)
            @Html.ValidationMessageFor(model => model.OuterMembraneProteinP6)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.RibosomalRna16S, new {@class = "col-sm-2 control-label"})
        <div class="col-sm-5">
            @Html.EnumRadioButtonFor(model => model.RibosomalRna16S)
            @Html.ValidationMessageFor(model => model.RibosomalRna16S)
        </div>
    </div>
    <div id="RibosomalRna16SMatchInPercentForm" class="form-group">
        @Html.LabelFor(m => m.RibosomalRna16SMatchInPercent, new {@class = "col-sm-2 control-label"})
        <div class="col-sm-4">
            @Html.TextBoxFor(m => m.RibosomalRna16SBestMatch, new { @class = "form-control", placeholder = "Beste Übereinstimmung" })
            @Html.ValidationMessageFor(model => model.RibosomalRna16SBestMatch)
        </div>
        <div class="col-sm-3">
            <div class="input-group">
                @Html.TextBoxFor(m => m.RibosomalRna16SMatchInPercent, new {@class = "form-control", placeholder="in Prozent"})
                <span class="input-group-addon">%</span>
            </div>
            @Html.ValidationMessageFor(model => model.RibosomalRna16SMatchInPercent)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ApiNh, new {@class = "col-sm-2 control-label"})
        <div class="col-sm-5">
            @Html.EnumRadioButtonFor(model => model.ApiNh)
            @Html.ValidationMessageFor(model => model.ApiNh)
        </div>
    </div>
    <div id="ApiNhMatchInPercentForm" class="form-group">
        @Html.LabelFor(m => m.ApiNhMatchInPercent, new {@class = "col-sm-2 control-label"})
        <div class="col-sm-4">
            @Html.TextBoxFor(m => m.ApiNhBestMatch, new { @class = "form-control", placeholder = "Beste Übereinstimmung" })
            @Html.ValidationMessageFor(model => model.ApiNhBestMatch)
        </div>
        <div class="col-sm-3">
            <div class="input-group">
                @Html.TextBoxFor(m => m.ApiNhMatchInPercent, new {@class = "form-control", placeholder = "in Prozent"})
                <span class="input-group-addon">%</span>
            </div>
            @Html.ValidationMessageFor(model => model.ApiNhMatchInPercent)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.MaldiTof, new {@class = "col-sm-2 control-label"})
        <div class="col-sm-5">
            @Html.EnumRadioButtonFor(model => model.MaldiTof)
            @Html.ValidationMessageFor(model => model.MaldiTof)
        </div>
    </div>
    <div id="MaldiTofMatchConfidenceForm" class="form-group">
        @Html.LabelFor(m => m.MaldiTofMatchConfidence, new {@class = "col-sm-2 control-label"})
        <div class="col-sm-4">
            @Html.TextBoxFor(m => m.MaldiTofBestMatch, new { @class = "form-control", placeholder = "Beste Übereinstimmung" })
            @Html.ValidationMessageFor(model => model.MaldiTofBestMatch)
        </div>
        <div class="col-sm-3">
            <div class="input-group">
                @Html.TextBoxFor(m => m.MaldiTofMatchConfidence, new { @class = "form-control", @placeholder = "Konfidenzwert" })
                <span class="input-group-addon">00,0</span>
            </div>
            @Html.ValidationMessageFor(model => model.MaldiTofMatchConfidence)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Ftsi, new { @class = "col-sm-2 control-label" })
        <div class="col-sm-5">
            @Html.EnumRadioButtonFor(model => model.Ftsi)
            @Html.ValidationMessageFor(model => model.Ftsi)
        </div>
    </div>
    <div id="FtsiEvaluationForm" class="form-group">
        @Html.LabelFor(m => m.FtsiEvaluation1, new { @class = "col-sm-2 control-label" })
        <div class="col-sm-4">
            @Html.TextBoxFor(m => m.FtsiEvaluation1, new { @class = "form-control" })
        </div>
        <div class="col-sm-3">
            @Html.TextBoxFor(m => m.FtsiEvaluation2, new { @class = "form-control" })
        </div>
    </div>
 
    <div class="form-group">
        @Html.LabelFor(model => model.Mlst, new { @class = "col-sm-2 control-label" })
        <div class="col-sm-5">
            @Html.EnumRadioButtonFor(model => model.Mlst)
            @Html.ValidationMessageFor(model => model.Mlst)
        </div>
    </div>
    <div id="MlstSequenceTypeForm" class="form-group">
        @Html.LabelFor(m => m.MlstSequenceType, new { @class = "col-sm-2 control-label" })
        <div class="col-sm-4">
            @Html.TextBoxFor(m => m.MlstSequenceType, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.MlstSequenceType)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Evaluation, new { @class = "col-sm-2 control-label" })
        <div class="col-sm-5">
            @Html.EnumDropDownListFor(model => model.Evaluation, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Evaluation)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ReportDate, new { @class = "col-sm-2 control-label" })
        <div class="col-sm-5">
            <div class="input-group">
                @{ Html.EnableClientValidation(false); }
                @Html.TextBoxFor(m => m.ReportDate, new { @class = "form-control datepicker", @type = "datetime", @Value = Model == null ? "" : String.Format("{0:dd.MM.yyyy}", Model.ReportDate) })
                @{ Html.EnableClientValidation(true); }
                <span class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></span>
            </div>
            @Html.ValidationMessageFor(model => model.ReportDate)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Remark, new { @class = "col-sm-2 control-label" })
        <div class="col-sm-5">
            @Html.TextAreaFor(m => m.Remark, new { @class = "form-control", @rows = "5" })
        </div>
    </div>
}

@section Scripts{
    <script>
        var clinicalBreakpoints = @(Html.Raw(Json.Encode(ViewBag.ClinicalBreakpoints)));

        $(document).ready(function()
        {
            $("select[id$=_EucastClinicalBreakpointId]").change(ETestChange);
            $("input[id$=_Measurement]").keyup(ETestChange);
            ShowRibosomalRna16SMatchInPercentIfDeterminedIsSelected();
            ShowApiNhMatchInPercentIfDeterminedIsSelected();
            ShowMaldiTofMatchConfidenceIfDeterminedIsSelected();
            ShowFtsiEvaluationIfDeterminedIsSelected();
            ShowMlstSequenceTypeIfDeterminedIsSelected();
        });

        function ShowRibosomalRna16SMatchInPercentIfDeterminedIsSelected()
        {
            ShowDivIfInputHasSpecificSelectedValueOrClearInputOtherwise(
                "#RibosomalRna16SMatchInPercentForm", "input:radio[name$='RibosomalRna16S']",
                "input:radio[name$='RibosomalRna16S']:checked",
                "Determined", "[id$='RibosomalRna16SBestMatch']", "[id$='RibosomalRna16SMatchInPercent']"
            );
        }

        function ShowApiNhMatchInPercentIfDeterminedIsSelected()
        {
            ShowDivIfInputHasSpecificSelectedValueOrClearInputOtherwise(
                "#ApiNhMatchInPercentForm", "input:radio[name$='ApiNh']",
                "input:radio[name$='ApiNh']:checked",
                "Determined", "[id$='ApiNhBestMatch']", "[id$='ApiNhMatchInPercent']"
            );
        }

        function ShowMaldiTofMatchConfidenceIfDeterminedIsSelected()
        {
            ShowDivIfInputHasSpecificSelectedValueOrClearInputOtherwise(
                "#MaldiTofMatchConfidenceForm", "input:radio[name$='MaldiTof']",
                "input:radio[name$='MaldiTof']:checked",
                "Determined", "[id$='MaldiTofBestMatch']", "[id$='MaldiTofMatchConfidence']"
            );
        }

        function ShowFtsiEvaluationIfDeterminedIsSelected()
        {
            ShowDivIfInputHasSpecificSelectedValueOrClearInputOtherwise(
                "#FtsiEvaluationForm", "input:radio[name$='Ftsi']",
                "input:radio[name$='Ftsi']:checked",
                "Determined", "[id$='FtsiEvaluation1']", "[id$='FtsiEvaluation2']"
            );
        }

        function ShowMlstSequenceTypeIfDeterminedIsSelected()
        {
            ShowDivIfInputHasSpecificSelectedValueOrClearInputOtherwise(
                "#MlstSequenceTypeForm", "input:radio[name$='Mlst']",
                "input:radio[name$='Mlst']:checked",
                "Determined", "[id$='MlstSequenceType']"
            );
        }

        function ETestChange()
        {
            var id = $(this).attr('id');
            var antibiotic = id.substring(0, id.indexOf('_'));
            var currentBreakpointSelector = '#' + antibiotic + '_EucastClinicalBreakpointId';
            var currentMeasurementSelector = '#' + antibiotic + '_Measurement';

            SetETestResult(antibiotic, null);

            var currentBreakpointId = $(currentBreakpointSelector).val();

            var currentMeasurement = parseFloat($(currentMeasurementSelector).val());
            if(isNaN(currentMeasurement))
            {
                return;
            }

            clinicalBreakpoints.forEach(function(clinicalBreakpoint)
            {
                if(currentBreakpointId == clinicalBreakpoint.EucastClinicalBreakpointId)
                {
                    if(currentMeasurement > clinicalBreakpoint.MicBreakpointResistent)
                    {
                        SetETestResult(antibiotic, 'Resistant');
                    }
                    else if(currentMeasurement <= clinicalBreakpoint.MicBreakpointSusceptible)
                    {
                        SetETestResult(antibiotic, 'Susceptible');
                    }
                    else if(currentMeasurement != null)
                    {
                        SetETestResult(antibiotic, 'Intermediate');
                    }
                }
            });
        }

        function SetETestResult(antibiotic, result)
        {
            var resultSelector = '#' + antibiotic + '_Result';

            $(resultSelector).val('');
            hideAll('span[id^=' + antibiotic + '_ETest]');

            if(result != null)
            {
                showAll('#' + antibiotic + '_ETest' + result);
                $(resultSelector).val(result);
            }
        }

    </script>
} 